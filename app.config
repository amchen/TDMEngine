<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="TDMEngine.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
            <section name="TDMEngine.TDMEngineSettings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="TDMEngine.TDMEngineSettings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <TDMEngine.Properties.Settings>
            <setting name="APP_VERSION" serializeAs="String">
                <value>@(#)PRODVERSION</value>
            </setting>
        </TDMEngine.Properties.Settings>
        <TDMEngine.TDMEngineSettings>
            <setting name="TDMFailureMsg" serializeAs="String">
                <value>Migration failed, view the log for detailed information.\n\nThe log file for the Restore may be viewed by going into Batch Manager and clicking on the failed job in the top grid. Then go to the bottom grid and click on the job step with the Status = ""F"". Right click and select View Log on the pop-up menu. Search the log for the word ""Error"" to locate the reason why the restore failed.</value>
            </setting>
            <setting name="CheckDate" serializeAs="String">
                <value>False</value>
            </setting>
            <setting name="A_SQL_GetDestBuilds" serializeAs="String">
                <value>select * from TDMCTRL where DESTBUILD &gt; '{0}' and DESTBUILD&lt;='{1}' order by KEY</value>
            </setting>
            <setting name="StringToReplace" serializeAs="String">
                <value>@(#)</value>
            </setting>
            <setting name="A_SQL_GetMigrStepCount" serializeAs="String">
                <value>select count(*) as CNT from {0}</value>
            </setting>
            <setting name="A_SQL_GetTDMTableData" serializeAs="String">
                <value>select A.KEY,{1} SEQ,DEFECT,REM_SQL,TNAME,CMD_SQL,DEPEND,NOTES,A.TYPE,DESCR 
 from {0} a, TDMTYPE b where a.type=b.type order by  A.KEY
</value>
            </setting>
            <setting name="SQL_DropTable" serializeAs="String">
                <value>if exists (select 1 from SYS.TABLES where NAME = '{0}') drop table {0}</value>
            </setting>
            <setting name="SQL_AlterTable" serializeAs="String">
                <value>if exists (select 1 from SYS.TABLES where NAME = '{0}')  alter table {0} {1};</value>
            </setting>
            <setting name="CreateTableScript_ProcName" serializeAs="String">
                <value>absp_Util_CreateTableScript</value>
            </setting>
            <setting name="SQL_DropIndex" serializeAs="String">
                <value>if exists (select 1 from SYS.INDEXES where OBJECT_ID = OBJECT_ID('{0}') and NAME = '{1}') drop index {0}.{1};</value>
            </setting>
            <setting name="SQL_DropProc" serializeAs="String">
                <value>if exists (select 1 from sysobjects where name = '{0}' and type = 'P')  drop procedure {0}</value>
            </setting>
            <setting name="SQL_DBMsg" serializeAs="String">
                <value>if exists ( select 1 from SYSOBJECTS where NAME = 'absp_MessageEx' and type = 'P' )    exec absp_MessageEx '{0}' </value>
            </setting>
            <setting name="SQL_SetDBVersion" serializeAs="String">
                <value>if exists ( select 1 from SYSOBJECTS where NAME = 'absp_Util_SetDBVersion' and type = 'P' ) 
begin
  exec absp_Util_SetDBVersion '{0}','{1}','{2}','{3}','{4}','{5}','{6}'
end </value>
            </setting>
            <setting name="SQL_GetDBVersion" serializeAs="String">
                <value> if exists ( select 1 from SYSOBJECTS where NAME = 'absp_Util_GetDBVersion' and type = 'P' ) 
 begin   
 exec absp_Util_GetDBVersion 
 end</value>
            </setting>
            <setting name="TDMFileName" serializeAs="String">
                <value>tdm.accdb</value>
            </setting>
            <setting name="SQL_GetAllTableNames" serializeAs="String">
                <value>select distinct TABLENAME, {0} from EqecatSystem..DICTTBL where LOCATION in ('B','S')  and 
{0} in ('Y','L')</value>
            </setting>
            <setting name="StoredProcPath" serializeAs="String">
                <value>ZZPROCS_MSSQL</value>
            </setting>
            <setting name="SQL_Migr_ReloadTable_PROC" serializeAs="String">
                <value>if exists ( select 1 from SYSOBJECTS where NAME = 'absp_Migr_ReloadTableEx' and type = 'P' )
begin
    exec absp_Migr_ReloadTableEx '{0}','{1}','','{2}','{3}'
end</value>
            </setting>
            <setting name="SQL_CheckIfTableExists" serializeAs="String">
                <value>select 1 from SYS.TABLES where NAME = '{0}'</value>
            </setting>
            <setting name="SQL_SetDBModeReadOnly" serializeAs="String">
                <value>if exists(select 1 from sys.databases where name = '{0}' )
begin
USE master;
ALTER DATABASE {0} SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
ALTER DATABASE {0} SET {1} ;ALTER DATABASE {0} SET MULTI_USER;
end;
</value>
            </setting>
            <setting name="DataDictFileName" serializeAs="String">
                <value>DataDict.xlsx</value>
            </setting>
            <setting name="BCP_APP_NAME" serializeAs="String">
                <value>bcp.exe</value>
            </setting>
            <setting name="DelimitersUsed" serializeAs="Xml">
                <value>
                    <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                        <string>|</string>
                        <string>,</string>
                    </ArrayOfString>
                </value>
            </setting>
            <setting name="MinCountForDelimiters" serializeAs="String">
                <value>3</value>
            </setting>
        </TDMEngine.TDMEngineSettings>
    </applicationSettings>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8"/></startup><userSettings>
        <TDMEngine.TDMEngineSettings>
            <setting name="SQL_GetTableGroup" serializeAs="String">
                <value>select TableType from eqecatSystem..DICTTBL where TableName='{0}'</value>
            </setting>
            <setting name="CreateTablePrefix" serializeAs="String">
                <value>SET ANSI_PADDING OFF;SET ANSI_NULL_DFLT_ON ON;SET ANSI_NULLS ON;</value>
            </setting>
            <setting name="TDM_MsgLogFile" serializeAs="String">
                <value>tdm_msg.log</value>
            </setting>
            <setting name="SQL_GetEnvironmentVar_PROC" serializeAs="String">
                <value>absp_Util_GetEnvironmentVariable</value>
            </setting>
            <setting name="TDM_UnloadPath" serializeAs="String">
                <value>\\TDM_UnloadPath</value>
            </setting>
            <setting name="SQL_GetSystemLookup" serializeAs="String">
                <value>select TableName, CloneName from dictClon where Sys_DB='L'</value>
            </setting>
        </TDMEngine.TDMEngineSettings>
    </userSettings>
</configuration>
